# AUTOGENERATED! DO NOT EDIT! File to edit: nbs/get_img_vecs.ipynb (unless otherwise specified).

__all__ = ['create_loader', 'precompute_image_vectors', 'files', 'lbls', 'image_dl', 'image_model', 'preds', 'nn_preds',
           'files', 'files']

# Cell
import os
import bcolz
import torch

import numpy as np
import snapworth.config as config
import snapworth.models.models as models
import snapworth.dataset.dataset as dataset
import snapworth.utils.utils as utils
import snapworth.utils.indexer as indexer

from tqdm import tqdm

# Cell
def create_loader(imgs, lbls, bs, resize=True, drop_last=False, shuffle=False):
    assert len(imgs) == len(lbls)
    image_ds = dataset.ImageDataset(imgs, lbls, resize=resize, config=config) #excluded from utils becuase of config
    image_dl = torch.utils.data.DataLoader(image_ds, batch_size=bs, drop_last=drop_last,
                                        num_workers=0, shuffle=shuffle)
    return image_dl

# Cell
def precompute_image_vectors(image_dl, model, path, force):
    model.eval()
    if os.path.exists(path) and not force: return
    arr = bcolz.carray(np.zeros((0,2048), np.float32), chunklen=1, mode='w', rootdir=path)

    with torch.no_grad():
        i = 0
        for batch in tqdm(image_dl):
            img = batch['image'].to(config.DEVICE)
            out = model.to(config.DEVICE)(img)
            out = out.squeeze(-1).squeeze(-1)
            arr.append(out.cpu().numpy())
            arr.flush()

# Cell
files = list((config.DATA_PATH/'images').glob('*.jpg'))
lbls = [0] * len(files)

# Cell
image_dl = create_loader(files, lbls, config.BATCH_SIZE)

# Cell
image_model = models.SnapModel(pretrained=True)

# Cell
# if __name__ == "__main__":
precompute_image_vectors(image_dl, image_model, config.IMAGE_VECS_PATH/'image_vecs', True)

# Cell
preds = bcolz.open(config.IMAGE_VECS_PATH/'image_vecs')
# preds = np.array(preds)
nn_preds = indexer.create_index(preds)

# Cell
nn_preds.saveIndex(filename=os.path.join(config.IMAGE_VECS_PATH/'index'), save_data=True)

# Cell
files = list((config.DATA_PATH/'images').glob('*.jpg'))
np.save('../data/all_image_paths.npy', files)
files = np.load(str(config.DATA_PATH/'all_image_paths.npy'), allow_pickle=True)
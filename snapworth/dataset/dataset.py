# AUTOGENERATED! DO NOT EDIT! File to edit: nbs/dataset.ipynb (unless otherwise specified).

__all__ = ['ImageDataset']

# Cell
import PIL
import torch

import numpy as np
import albumentations as A

# Cell
class ImageDataset(torch.utils.data.Dataset):
    def __init__(self, img_paths, lbls, config, resize=True):

        self.img_paths = img_paths
        self.lbls = lbls
        self.resize = resize
        self.config = config

    def __getitem__(self, i):
        img_path = self.img_paths[i]
        lbl = self.lbls[i]

        img = PIL.Image.open(img_path)

        if self.resize:
            img = img.resize((self.config.sz, self.config.sz), resample=PIL.Image.LANCZOS)

        img = np.asarray(img).astype(np.uint8)


        data = {'image' : img}
        data = self.transforms(self.config)(**data)
        img = data['image']

        img = np.array(img)

        return {
            'image' : torch.tensor(img, dtype=torch.float).permute(2, 0, 1),
            'target' : torch.tensor(lbl, dtype=torch.float)
            }


    def __len__(self):
        return len(self.lbls)

    def transforms(self, config):
        return A.Compose([
                A.Normalize(config.MEAN, config.STD, max_pixel_value=255.0, always_apply=True),
                # A.CenterCrop(300, 300, always_apply=True),
                # A.RandomRotate90(p=0.4),
                # A.HorizontalFlip(p=0.5),
                # A.VerticalFlip(p=0.5),
                # A.ShiftScaleRotate(p=0.5),
                # A.RandomBrightnessContrast(),
                A.Resize(height=config.sz+100, width=config.sz+100, p=1),
                ], p=1.0)